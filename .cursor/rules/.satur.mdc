---
name: "Carl√£o - Marketplace de Servi√ßos"
description: "Sistema completo de marketplace de servi√ßos com arquitetura limpa e padr√µes SOLID"
version: "1.0.0"
lastUpdated: "2025-01-02"
---

# üèóÔ∏è Configura√ß√£o de Arquitetura - Carl√£o

## üéØ Princ√≠pios Arquiteturais Obrigat√≥rios

### Clean Architecture
- **Camadas bem definidas**: Entities ‚Üí Use Cases ‚Üí Controllers ‚Üí Frameworks
- **Regra de depend√™ncia**: Camadas internas n√£o dependem de camadas externas
- **Invers√£o de depend√™ncia**: Sempre dependa de abstra√ß√µes, n√£o de implementa√ß√µes
- **Separa√ß√£o de responsabilidades**: Cada camada tem uma responsabilidade espec√≠fica

### Princ√≠pios SOLID

#### Single Responsibility Principle (SRP)
```typescript
// ‚úÖ CORRETO - Uma responsabilidade por classe
class UserService {
  async create(userData: CreateUserDto): Promise<UserEntity> {}
  async findById(id: number): Promise<UserEntity> {}
}

class UserValidator {
  validateDocument(document: string, type: DocumentType): boolean {}
}

// ‚ùå INCORRETO - M√∫ltiplas responsabilidades
class UserManager {
  async createUser() {}
  async sendEmail() {}
  async validateDocument() {}
  async generateReport() {}
}
```

#### Open/Closed Principle (OCP)
```typescript
// ‚úÖ CORRETO - Extens√≠vel sem modifica√ß√£o
abstract class DocumentValidator {
  abstract validate(document: string): boolean;
}

class CPFValidator extends DocumentValidator {
  validate(document: string): boolean {
    return isCPF(document);
  }
}

// ‚ùå INCORRETO - Modifica√ß√£o necess√°ria para extens√£o
class DocumentValidator {
  validate(document: string, type: 'CPF' | 'CNPJ'): boolean {
    if (type === 'CPF') return isCPF(document);
    if (type === 'CNPJ') return isCNPJ(document);
    // Precisa modificar para adicionar novo tipo
  }
}
```

#### Liskov Substitution Principle (LSP)
```typescript
// ‚úÖ CORRETO - Substitui√ß√£o transparente
interface PaymentProcessor {
  processPayment(amount: number): Promise<PaymentResult>;
}

class CreditCardProcessor implements PaymentProcessor {
  async processPayment(amount: number): Promise<PaymentResult> {
    // Implementa√ß√£o espec√≠fica
  }
}

// ‚ùå INCORRETO - Comportamento inconsistente
class PixProcessor implements PaymentProcessor {
  async processPayment(amount: number): Promise<PaymentResult> {
    if (amount > 1000) throw new Error('PIX n√£o suporta valores altos');
    // Quebra o contrato da interface
  }
}
```

#### Interface Segregation Principle (ISP)
```typescript
// ‚úÖ CORRETO - Interfaces espec√≠ficas
interface UserReader {
  findById(id: number): Promise<UserEntity>;
  findByEmail(email: string): Promise<UserEntity>;
}

interface UserWriter {
  create(userData: CreateUserDto): Promise<UserEntity>;
  update(id: number, userData: UpdateUserDto): Promise<UserEntity>;
}

// ‚ùå INCORRETO - Interface gorda
interface UserRepository {
  findById(id: number): Promise<UserEntity>;
  create(userData: CreateUserDto): Promise<UserEntity>;
  generateReport(): Promise<Report>;
  sendEmail(email: string): Promise<void>;
  validateDocument(doc: string): boolean;
}
```

#### Dependency Inversion Principle (DIP)
```typescript
// ‚úÖ CORRETO - Depend√™ncia de abstra√ß√£o
@Injectable()
class UserService {
  constructor(private userRepository: IUserRepository) {}

  async createUser(userData: CreateUserDto): Promise<UserEntity> {
    return this.userRepository.create(userData);
  }
}

// ‚ùå INCORRETO - Depend√™ncia de implementa√ß√£o
@Injectable()
class UserService {
  constructor(private prisma: PrismaService) {}

  async createUser(userData: CreateUserDto): Promise<UserEntity> {
    return this.prisma.user.create({ data: userData });
  }
}
```

## üèõÔ∏è Estrutura de M√≥dulos Obrigat√≥ria

### Backend (NestJS)
```
apps/api/src/
‚îú‚îÄ‚îÄ [module]/
‚îÇ   ‚îú‚îÄ‚îÄ controller/           # Interface Adapters
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ [module].controller.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ [module].controller.spec.ts
‚îÇ   ‚îú‚îÄ‚îÄ service/              # Application Business Rules
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ [module].service.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ [module].service.spec.ts
‚îÇ   ‚îú‚îÄ‚îÄ repository/           # Data Access Layer
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ [module].repository.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ [module].repository.spec.ts
‚îÇ   ‚îú‚îÄ‚îÄ entities/             # Enterprise Business Rules
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ [module].entity.ts
‚îÇ   ‚îú‚îÄ‚îÄ dto/                  # Data Transfer Objects
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ create-[module].dto.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ update-[module].dto.ts
‚îÇ   ‚îú‚îÄ‚îÄ validation/           # Business Rules Validation
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ [module]-validation.service.ts
‚îÇ   ‚îî‚îÄ‚îÄ [module].module.ts    # Module Definition
‚îî‚îÄ‚îÄ common/                   # Shared Resources
    ‚îú‚îÄ‚îÄ decorators/
    ‚îú‚îÄ‚îÄ guards/
    ‚îú‚îÄ‚îÄ interceptors/
    ‚îî‚îÄ‚îÄ pipes/
```

### Frontend (React)
```
apps/web/src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ [domain]/             # Domain-specific components
‚îÇ   ‚îú‚îÄ‚îÄ common/               # Shared components
‚îÇ   ‚îú‚îÄ‚îÄ forms/                # Form components
‚îÇ   ‚îú‚îÄ‚îÄ modals/               # Modal components
‚îÇ   ‚îî‚îÄ‚îÄ dialogs/              # Dialog components
‚îú‚îÄ‚îÄ hooks/                    # Custom hooks
‚îÇ   ‚îî‚îÄ‚îÄ use[Domain].ts
‚îú‚îÄ‚îÄ pages/                    # Page components
‚îÇ   ‚îî‚îÄ‚îÄ [Domain]Page.tsx
‚îú‚îÄ‚îÄ services/                 # API services
‚îÇ   ‚îî‚îÄ‚îÄ [domain].service.ts
‚îú‚îÄ‚îÄ stores/                   # State management
‚îÇ   ‚îî‚îÄ‚îÄ [domain].store.ts
‚îú‚îÄ‚îÄ types/                    # Type definitions
‚îÇ   ‚îî‚îÄ‚îÄ [domain].ts
‚îî‚îÄ‚îÄ utils/                    # Utility functions
    ‚îî‚îÄ‚îÄ [domain].utils.ts
```

## üìã Padr√µes de C√≥digo Obrigat√≥rios

### 1. Naming Conventions

#### Backend
```typescript
// Controllers
export class UserController {}
export class ServiceController {}

// Services
export class UserService {}
export class PaymentService {}

// Entities
export class UserEntity {}
export class ServiceEntity {}

// DTOs
export class CreateUserDto {}
export class UpdateUserDto {}
export class GetUsersQueryDto {}

// Repositories
export class UserRepository {}
export class ServiceRepository {}
```

#### Frontend
```typescript
// Components
export function UserCard() {}
export function ServiceModal() {}

// Hooks
export function useUsers() {}
export function useAuth() {}

// Pages
export function UsersPage() {}
export function LoginPage() {}

// Services
export const userService = {}
export const authService = {}

// Stores
export const useUserStore = create()
export const useAuthStore = create()
```

### 2. File Structure

#### Backend Files
```typescript
// Sempre use barrel exports
// apps/api/src/user/index.ts
export * from './controller/user.controller';
export * from './service/user.service';
export * from './entities/user.entity';
export * from './dto/create-user.dto';
export * from './user.module';
```

#### Frontend Files
```typescript
// Sempre use default exports para componentes
// apps/web/src/components/UserCard.tsx
export default function UserCard() {}

// Named exports para utilit√°rios
// apps/web/src/utils/validation.ts
export function validateEmail() {}
export function validateDocument() {}
```

### 3. Error Handling

#### Backend
```typescript
// ‚úÖ CORRETO - Erros espec√≠ficos
throw new BadRequestException('Fornecedor deve ter localiza√ß√£o');
throw new NotFoundException('Usu√°rio n√£o encontrado');
throw new ConflictException('Email j√° est√° em uso');

// ‚ùå INCORRETO - Erros gen√©ricos
throw new Error('Erro');
throw new BadRequestException('Erro de valida√ß√£o');
```

#### Frontend
```typescript
// ‚úÖ CORRETO - Tratamento estruturado
export function useErrorHandler() {
  const handleError = useCallback((error: unknown) => {
    if (error instanceof ApiError) {
      switch (error.status) {
        case 400:
          toast.error(error.message);
          break;
        case 401:
          toast.error('Sess√£o expirada. Fa√ßa login novamente.');
          break;
        case 403:
          toast.error('Voc√™ n√£o tem permiss√£o para esta a√ß√£o.');
          break;
        default:
          toast.error('Erro inesperado. Tente novamente.');
      }
    }
  }, []);

  return { handleError };
}
```

### 4. Valida√ß√£o de Dados

#### Backend com Zod
```typescript
// ‚úÖ CORRETO - Valida√ß√£o tipada
const createUserSchema = z.object({
  name: z.string().min(2, 'Nome deve ter pelo menos 2 caracteres'),
  email: z.string().email('Email inv√°lido'),
  password: z.string().min(6, 'Senha deve ter pelo menos 6 caracteres'),
  document: z.string().refine((doc) => {
    return isCPF(doc) || isCNPJ(doc);
  }, 'Documento inv√°lido')
});

export class CreateUserDto extends createZodDto(createUserSchema) {}
```

#### Frontend com Zod
```typescript
// ‚úÖ CORRETO - Mesma valida√ß√£o no frontend
const loginSchema = z.object({
  email: z.string().email('Email inv√°lido'),
  password: z.string().min(6, 'Senha deve ter pelo menos 6 caracteres')
});

export function LoginForm() {
  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema)
  });
}
```

## üîí Regras de Seguran√ßa

### 1. Autentica√ß√£o e Autoriza√ß√£o
```typescript
// ‚úÖ CORRETO - Prote√ß√£o por roles
@UseGuards(JwtAuthGuard, RolesGuard)
@Roles(UserRole.ADMIN)
@Controller('admin')
export class AdminController {
  @Get('users')
  async getUsers(): Promise<UserEntity[]> {
    return this.userService.findAll();
  }
}
```

### 2. Valida√ß√£o de Entrada
```typescript
// ‚úÖ CORRETO - Sempre validar entrada
@Post()
async create(@Body() createUserDto: CreateUserDto): Promise<UserEntity> {
  // Valida√ß√£o autom√°tica via Zod
  return this.userService.create(createUserDto);
}
```

### 3. Sanitiza√ß√£o de Dados
```typescript
// ‚úÖ CORRETO - Sanitizar dados sens√≠veis
export class UserEntity {
  id: number;
  name: string;
  email: string;
  role: UserRole;

  @Exclude()
  password: string;

  constructor(partial: Partial<UserEntity>) {
    Object.assign(this, partial);
  }
}
```

## üé® Padr√µes de UI/UX

### 1. Componentes Reutiliz√°veis
```typescript
// ‚úÖ CORRETO - Componentes do design system
import { Button, Card, Input, Label } from '@satur/ui';

export function UserForm() {
  return (
    <Card>
      <CardContent>
        <Label htmlFor="name">Nome</Label>
        <Input id="name" placeholder="Digite o nome" />
        <Button type="submit">Salvar</Button>
      </CardContent>
    </Card>
  );
}
```

### 2. Loading States
```typescript
// ‚úÖ CORRETO - Estados de loading
export function UsersList() {
  const { data: users, isLoading, error } = useUsers();

  if (isLoading) {
    return <div>Carregando usu√°rios...</div>;
  }

  if (error) {
    return <div>Erro ao carregar usu√°rios</div>;
  }

  return (
    <div>
      {users?.map(user => (
        <UserCard key={user.id} user={user} />
      ))}
    </div>
  );
}
```

### 3. Error Boundaries
```typescript
// ‚úÖ CORRETO - Error boundaries
export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <div>Algo deu errado. Tente recarregar a p√°gina.</div>;
    }

    return this.props.children;
  }
}
```

## üìä Performance

### 1. Lazy Loading
```typescript
// ‚úÖ CORRETO - Lazy loading de p√°ginas
const UsersPage = lazy(() => import('./pages/UsersPage'));
const ServicesPage = lazy(() => import('./pages/ServicesPage'));

function App() {
  return (
    <Suspense fallback={<div>Carregando...</div>}>
      <Routes>
        <Route path="/users" element={<UsersPage />} />
        <Route path="/services" element={<ServicesPage />} />
      </Routes>
    </Suspense>
  );
}
```

### 2. Memoiza√ß√£o
```typescript
// ‚úÖ CORRETO - Memoiza√ß√£o de componentes pesados
const UserCard = memo(({ user, onEdit }: UserCardProps) => {
  const handleEdit = useCallback(() => {
    onEdit(user);
  }, [user, onEdit]);

  return (
    <Card>
      <CardContent>
        <h3>{user.name}</h3>
        <p>{user.email}</p>
        <Button onClick={handleEdit}>Editar</Button>
      </CardContent>
    </Card>
  );
});
```

### 3. Pagina√ß√£o
```typescript
// ‚úÖ CORRETO - Sempre paginar listas grandes
export function useUsers(
  page: number = 1,
  limit: number = 20,
  search?: string
) {
  return useQuery({
    queryKey: ['users', page, limit, search],
    queryFn: () => usersApi.getAll(page, limit, search),
    staleTime: 5 * 60 * 1000, // 5 minutos
  });
}
```

## üß™ Qualidade de C√≥digo

### 1. TypeScript Strict
```typescript
// ‚úÖ CORRETO - Tipos expl√≠citos
interface CreateUserRequest {
  name: string;
  email: string;
  password: string;
  role: UserRole;
  locationId?: number;
}

// ‚ùå INCORRETO - any ou tipos impl√≠citos
function createUser(data: any): any {
  return userService.create(data);
}
```

### 2. Documenta√ß√£o
```typescript
// ‚úÖ CORRETO - Documenta√ß√£o JSDoc
/**
 * Servi√ßo respons√°vel pela gest√£o de usu√°rios
 *
 * @description Implementa as regras de neg√≥cio para:
 * - Cria√ß√£o e valida√ß√£o de usu√°rios
 * - Aprova√ß√£o de fornecedores
 * - Gerenciamento de perfis
 *
 * @example
 * ```typescript
 * const userService = new UserService(userRepository);
 * const user = await userService.create({
 *   name: 'Jo√£o Silva',
 *   email: 'joao@email.com',
 *   role: UserRole.SUPPLIER
 * });
 * ```
 */
@Injectable()
export class UserService {
  constructor(private userRepository: UserRepository) {}

  /**
   * Cria um novo usu√°rio no sistema
   *
   * @param userData - Dados do usu√°rio a ser criado
   * @returns Promise com o usu√°rio criado
   * @throws BadRequestException quando dados inv√°lidos
   * @throws ConflictException quando email j√° existe
   */
  async create(userData: CreateUserDto): Promise<UserEntity> {
    await this.validateBusinessRules(userData);
    return this.userRepository.create(userData);
  }
}
```

### 3. Logging
```typescript
// ‚úÖ CORRETO - Logging estruturado
@Injectable()
export class UserService {
  private readonly logger = new Logger(UserService.name);

  async create(userData: CreateUserDto): Promise<UserEntity> {
    this.logger.log(`Creating user with email: ${userData.email}`);

    try {
      const user = await this.userRepository.create(userData);
      this.logger.log(`User created successfully with ID: ${user.id}`);
      return user;
    } catch (error) {
      this.logger.error(`Failed to create user: ${error.message}`, error.stack);
      throw error;
    }
  }
}
```

## üîß Configura√ß√£o de Ambiente

### 1. Vari√°veis de Ambiente
```typescript
// ‚úÖ CORRETO - Configura√ß√£o tipada
export default () => ({
  port: parseInt(process.env.PORT, 10) || 3000,
  database: {
    url: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production'
  },
  jwt: {
    secret: process.env.JWT_SECRET,
    expiresIn: process.env.JWT_EXPIRES_IN || '7d'
  }
});
```

### 2. Docker
```dockerfile
# ‚úÖ CORRETO - Multi-stage build
FROM node:18-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

FROM node:18-alpine AS runner
WORKDIR /app
COPY --from=builder /app/node_modules ./node_modules
COPY . .
EXPOSE 3000
CMD ["npm", "run", "start:prod"]
```

## üìã Checklist de Qualidade

### ‚úÖ Antes de Commit
- [ ] Todos os testes passando
- [ ] Lint sem erros
- [ ] Tipos TypeScript v√°lidos
- [ ] Documenta√ß√£o atualizada
- [ ] Vari√°veis de ambiente configuradas
- [ ] Logs estruturados implementados

### ‚úÖ Antes de Deploy
- [ ] Testes de integra√ß√£o passando
- [ ] Build de produ√ß√£o funcionando
- [ ] Migra√ß√µes de banco testadas
- [ ] Vari√°veis de ambiente de produ√ß√£o configuradas
- [ ] Monitoramento configurado

### ‚úÖ Code Review
- [ ] Princ√≠pios SOLID respeitados
- [ ] Clean Architecture seguida
- [ ] Padr√µes de naming consistentes
- [ ] Error handling apropriado
- [ ] Performance otimizada
- [ ] Seguran√ßa implementada

---

## üö´ Pr√°ticas Proibidas

### ‚ùå Nunca Fa√ßa
```typescript
// ‚ùå INCORRETO - Viola√ß√£o de princ√≠pios
class UserService {
  async create(userData: any): Promise<any> {
    // L√≥gica misturada
    const user = await this.prisma.user.create({ data: userData });
    await this.emailService.sendWelcomeEmail(user.email);
    await this.logService.log('User created');
    return user;
  }
}

// ‚ùå INCORRETO - Sem valida√ß√£o
@Post()
async create(@Body() data: any): Promise<any> {
  return this.userService.create(data);
}

// ‚ùå INCORRETO - Hardcoded values
const MAX_USERS = 1000;
const API_URL = 'http://localhost:3000';
```

### ‚úÖ Sempre Fa√ßa
```typescript
// ‚úÖ CORRETO - Seguindo princ√≠pios
@Injectable()
export class UserService {
  constructor(
    private userRepository: UserRepository,
    private eventService: EventService
  ) {}

  async create(userData: CreateUserDto): Promise<UserEntity> {
    await this.validateBusinessRules(userData);
    const user = await this.userRepository.create(userData);
    await this.eventService.emitUserCreated(user);
    return user;
  }
}

// ‚úÖ CORRETO - Com valida√ß√£o
@Post()
async create(@Body() createUserDto: CreateUserDto): Promise<UserEntity> {
  return this.userService.create(createUserDto);
}

// ‚úÖ CORRETO - Configura√ß√£o externa
export default () => ({
  maxUsers: parseInt(process.env.MAX_USERS, 10) || 1000,
  apiUrl: process.env.API_URL || 'http://localhost:3000'
});
```

---

**Configura√ß√£o mantida por**: Equipe de Arquitetura Carl√£o
**√öltima atualiza√ß√£o**: Janeiro 2025
**Vers√£o**: 1.0.0

> üìù **Nota**: Esta configura√ß√£o deve ser seguida rigorosamente em todo c√≥digo gerado. Qualquer desvio deve ser justificado e documentado.
